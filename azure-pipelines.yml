# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: none
pr:
  branches:
    include:
      - master

variables:
  COMMIT_ID: e1e81264dc1d6362c9c3ee3b7752ad9e035c4a09
  ENDPOINT: build

name: $(TeamProject)_$(Build.DefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)

stages:
- stage: Build
  pool:
    vmImage: 'ubuntu-20.04'
  jobs:
  - job: Test1
    displayName: Test1
    steps:
    - checkout: self
      displayName: "Checkout test-workflow"
    - script: |
        echo Test2
      displayName: "Test2"
    - bash: |
        echo This script could use $SYSTEM_ACCESSTOKEN
        data='[
          {
            "op": "add",
            "path": "/Test",
            "value": "Test1"
          }
        ]'
        base64pat=$(printf "%s"":$SYSTEM_ACCESSTOKEN" | base64)
        uri="$(System.CollectionUri)$(System.TeamProjectId)/_apis/build/builds/$(Build.BuildId)/properties?api-version=6.0-preview.1"
        header1="Authorization: Bearer $SYSTEM_ACCESSTOKEN"
        header2="Content-Type:application/json"
        header3="Content-Type:application/json-patch+json"
        echo "uri=$uri"
        echo "header1=$header1"
        echo "header2=$header2"
        echo "header3=$header3"
        curl -X GET --http1.1 -S -H "$header1" -H "$header2" "$uri" 2>test
        curl -X PATCH --http1.1 -S -H "$header1" -H "$header3" -d "$data" "$uri" 2>test
        curl -X GET --http1.1 -S -H "$header1" -H "$header2" "$uri" 2>test
      env:
        SYSTEM_ACCESSTOKEN: $(System.AccessToken)

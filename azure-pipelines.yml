# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: none
pr:
  branches:
    include:
      - master

variables:
  COMMIT_ID: e1e81264dc1d6362c9c3ee3b7752ad9e035c4a09
  ENDPOINT: build
  RETRY_COUNT: 1

name: $(TeamProject)_$(Build.DefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)

parameters:
- name: retry_count
  type: number
  default: 0
- name: tags
  type: object
  default: []

stages:
- stage: Build
  pool:
    vmImage: 'ubuntu-20.04'
  jobs:
  - job: Test1
    variables:
      RETRY_COUNT: 1
    displayName: Test1
    steps:
    - script: |
        echo tags='${{ convertToJson(parameters.tags) }}'
        echo "##vso[task.setvariable variable=triggerBuildId]$BUILD_BUILDID"
        echo "##vso[task.setvariable variable=TestSuite]TestSuite"
      displayName: "Set variables"
    - task: TriggerBuild@4
      inputs:
        definitionIsInCurrentTeamProject: false
        tfsServer: $(System.CollectionUri)
        # internal: https://dev.azure.com/mssonic/_apis/projects?api-version=5.0
        # project id: 12b9cbf4-b1d3-4768-8e49-669345c32e5d
        teamProject: internal
        buildDefinition: 'test-completion-trigger'
        queueBuildForUserThatTriggeredBuild: true
        ignoreSslCertificateErrors: false
        useSameSourceVersion: false
        useCustomSourceVersion: false
        useSameBranch: true
        waitForQueuedBuildsToFinish: false
        storeInEnvironmentVariable: true
        authenticationMethod: 'Personal Access Token'
        password: '$(system.accesstoken)'
        enableBuildInQueueCondition: false
        dependentOnSuccessfulBuildCondition: false
        dependentOnFailedBuildCondition: false
        checkbuildsoncurrentbranch: false
        failTaskIfConditionsAreNotFulfilled: false
        buildParameters: 'TestSuite: APP-API,TestVar1:testValue1,testParameter1:testPar1'
        #templateParameters: '{"testParameter1":"testPar1","testParameter2":"[\"testPar1\",\"testPar2\"]"}'
        templateParameters: |
          testParameter1:testPar1,
          testParameter2:{"param1":["value1","value2"]}
    - checkout: self
      retryCountOnTaskFailure: 1
      displayName: "Checkout test-workflow"
    - script: |
        echo Test2
        export -p
        make -f Makefile.test all
        exit 1
      #retryCountOnTaskFailure: $(RETRY_COUNT)
      displayName: "Test2"
    - bash: |
        sudo apt-get install -y jq
        echo This script could use $SYSTEM_ACCESSTOKEN
        data='[
          {
            "op": "add",
            "path": "/Test",
            "value": "Test1"
          }
        ]'
        base64pat=$(printf "%s"":$SYSTEM_ACCESSTOKEN" | base64)
        uri="$(System.CollectionUri)$(System.TeamProjectId)/_apis/build/builds/$(Build.BuildId)/properties?api-version=6.0-preview.1"
        header1="Authorization: Bearer $SYSTEM_ACCESSTOKEN"
        header2="Content-Type:application/json"
        header3="Content-Type:application/json-patch+json"
        echo "uri=$uri"
        echo "header1=$header1"
        echo "header2=$header2"
        echo "header3=$header3"
        curl -X GET --http1.1 -S -H "$header1" -H "$header2" "$uri" 2>test
        echo "ret=$?"
        cat test
        curl -X PATCH --http1.1 -S -H "$header1" -H "$header3" -d "$data" "$uri" 2>test
        echo "ret=$?"
        cat test
        curl -X GET --http1.1 -S -H "$header1" -H "$header2" "$uri" 2>test
        echo "ret=$?"
        cat test
        definitionName="xumia.sonic-pipelines"
        provider="$(Build.Repository.Provider)"
        repoUri="$(System.PullRequest.SourceRepositoryURI)"
        repoName=$(echo "$repoUri" | awk -F/ '{print $(NF)}' | sed 's/.git$//')
        repoOwner=$(echo "$repoUri" | awk -F/ '{print $(NF-1)}')
        query_build_uri="$(System.CollectionUri)$(System.TeamProjectId)/_apis/build/definitions?name=$definitionName&\$top=1&api-version=6.0"
        definitionId=$(curl -X GET --http1.1 -S -H "$header1" -H "$header2" "$query_build_uri" | jq '.value | first | .id')
        echo "definitionId=$definitionId"
        parameters=$(python -c "import json;print(json.dumps({'pullRequestId':'$(System.PullRequest.pullRequestNumber)',
             'owner':'$repoOwner',
             'repository':'$repoName',
             'comment':'My comment'}))")
        build_request=$(python -c "import json;parameters=json.dumps({'pullRequestId':'$(System.PullRequest.pullRequestNumber)',
             'owner':'$repoOwner',
             'repository':'$repoName',
             'comment':'My comment'});print(json.dumps({'definition':{'id':'$definitionId'},
             'parameters':parameters}))")
        echo "build_request=$build_request"
        build_uri="$(System.CollectionUri)$(System.TeamProjectId)/_apis/build/builds?api-version=6.0"
        curl -X POST --http1.1 -S -H "$header1" -H "$header2" -d "$build_request" "$build_uri" 2>test
        cat test
      env:
        SYSTEM_ACCESSTOKEN: $(System.AccessToken)
